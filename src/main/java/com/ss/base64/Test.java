package com.ss.base64;

import cn.hutool.core.codec.Base64;
import org.apache.commons.lang3.StringUtils;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

/**
 * @author ChengXiao
 * @date 2021/11/18 18:05
 **/
public class Test {

    public static void main(String[] args) {
        String a = "VRMRHECYSWGXAJXI";
        String encode = Base64.encode(a);
        System.out.println("Base64编码后：" + encode);

        String decodeStr = Base64.decodeStr("");
        System.out.println("Base64解码后：" + decodeStr);

        String s = "2021-10-27 09:53:30";
        OffsetDateTime offsetDateTime = convertDateTimeISO(s);
        System.out.println(offsetDateTime);
    }

    /**
     * yyyy-MM-dd
     *
     * @param date
     * @return
     */
    public static OffsetDateTime convertDateTimeISO(String dateTime) {
        if (StringUtils.isBlank(dateTime)) {
            return null;
        }

        LocalDateTime localDateTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        return OffsetDateTime.of(localDateTime, ZoneId.systemDefault().getRules().getOffset(localDateTime));
    }
}
